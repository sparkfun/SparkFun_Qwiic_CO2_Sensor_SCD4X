{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for redirect to Introduction</p>"},{"location":"examples/","title":"Arduino Examples","text":"<p>The SparkFun SCD4X Arduino Library includes several examples to start receiving CO<sub>2</sub> concentration, temperature and humidity data from the SCD4X. Let's take a closer look at a few of the examples included with the library.</p>"},{"location":"examples/#example-1-basic-readings","title":"Example 1 - Basic Readings","text":"<p>The first example in the library demonstrates how to initialize the SCD4X on the I<sup>2</sup>C bus to poll data from the sensor using periodic measurements every five seconds. Open the example by navigating to File &gt; Examples &gt; SparkFun SCD4x Arduino Library &gt; Example1_BasicReadings. Alternatively, you can copy the code below into a blank Arduino sketch:</p> Example 1 Arduino Code <pre><code>/*\n  Reading CO2, humidity and temperature from the SCD4x\n  By: Paul Clark\n  Based on earlier code by: Nathan Seidle\n  SparkFun Electronics\n  Date: June 3rd, 2021\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun! https://www.sparkfun.com/products/18365\n\n  This example prints the current CO2 level, relative humidity, and temperature in C.\n\n  Hardware Connections:\n  Attach RedBoard to computer using a USB cable.\n  Connect SCD40/41 to RedBoard using Qwiic cable.\n  Open Serial Monitor at 115200 baud.\n*/\n\n#include &lt;Wire.h&gt;\n\n#include \"SparkFun_SCD4x_Arduino_Library.h\" //Click here to get the library: http://librarymanager/All#SparkFun_SCD4x\nSCD4x mySensor;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(F(\"SCD4x Example\"));\n  Wire.begin();\n\n  //mySensor.enableDebugging(); // Uncomment this line to get helpful debug messages on Serial\n\n  //.begin will start periodic measurements for us (see the later examples for details on how to override this)\n  if (mySensor.begin() == false)\n  {\n    Serial.println(F(\"Sensor not detected. Please check wiring. Freezing...\"));\n    while (1)\n      ;\n  }\n\n  //The SCD4x has data ready every five seconds\n}\n\nvoid loop()\n{\n  if (mySensor.readMeasurement()) // readMeasurement will return true when fresh data is available\n  {\n    Serial.println();\n\n    Serial.print(F(\"CO2(ppm):\"));\n    Serial.print(mySensor.getCO2());\n\n    Serial.print(F(\"\\tTemperature(C):\"));\n    Serial.print(mySensor.getTemperature(), 1);\n\n    Serial.print(F(\"\\tHumidity(%RH):\"));\n    Serial.print(mySensor.getHumidity(), 1);\n\n    Serial.println();\n  }\n  else\n    Serial.print(F(\".\"));\n\n  delay(500);\n}\n</code></pre> <p>Select your Board/Port and click the \"Upload\" button. Once the code finishes uploading, open up a Serial Monitor and check the output. You should see CO<sub>2</sub>, temperature and humidity data print out every 5 seconds:</p> <p></p>"},{"location":"examples/#example-2-low-power-readings","title":"Example 2 - Low Power Readings","text":"<p>The second example demonstrates how to configure the SCD4X to disable periodic measurements and enable low-power mode. This sets the SCD4x to take measurements every 30 seconds. Open the example in Arduino or copy the code below into a blank sketch:</p> Example 2 Arduino Code <pre><code>/*\n  Reading CO2, humidity and temperature from the SCD4x in Low Power mode\n  By: Paul Clark\n  Based on earlier code by: Nathan Seidle\n  SparkFun Electronics\n  Date: June 3rd, 2021\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun! https://www.sparkfun.com/products/18365\n\n  This example prints the current CO2 level, relative humidity, and temperature in C.\n\n  Hardware Connections:\n  Attach RedBoard to computer using a USB cable.\n  Connect SCD40/41 to RedBoard using Qwiic cable.\n  Open Serial Monitor at 115200 baud.\n*/\n\n#include &lt;Wire.h&gt;\n\n#include \"SparkFun_SCD4x_Arduino_Library.h\" //Click here to get the library: http://librarymanager/All#SparkFun_SCD4x\nSCD4x mySensor;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(F(\"SCD4x Example\"));\n  Wire.begin();\n\n  //mySensor.enableDebugging(); // Uncomment this line to get helpful debug messages on Serial\n\n  //.begin will start periodic measurements for us (see the later examples for details on how to override this)\n  if (mySensor.begin() == false)\n  {\n    Serial.println(F(\"Sensor not detected. Please check wiring. Freezing...\"));\n    while (1)\n      ;\n  }\n\n  //By default, the SCD4x has data ready every five seconds.\n  //We can enable low power operation and receive a reading every ~30 seconds\n\n  //But first, we need to stop periodic measurements otherwise startLowPowerPeriodicMeasurement will fail\n  if (mySensor.stopPeriodicMeasurement() == true)\n  {\n    Serial.println(F(\"Periodic measurement is disabled!\"));\n  }  \n\n  //Now we can enable low power periodic measurements\n  if (mySensor.startLowPowerPeriodicMeasurement() == true)\n  {\n    Serial.println(F(\"Low power mode enabled!\"));\n  }\n\n  //The SCD4x has data ready every thirty seconds\n}\n\nvoid loop()\n{\n  if (mySensor.readMeasurement()) // readMeasurement will return true when fresh data is available\n  {\n    Serial.println();\n\n    Serial.print(F(\"CO2(ppm):\"));\n    Serial.print(mySensor.getCO2());\n\n    Serial.print(F(\"\\tTemperature(C):\"));\n    Serial.print(mySensor.getTemperature(), 1);\n\n    Serial.print(F(\"\\tHumidity(%RH):\"));\n    Serial.print(mySensor.getHumidity(), 1);\n\n    Serial.println();\n  }\n  else\n    Serial.print(F(\".\"));\n\n  delay(1000);\n}\n</code></pre> <p>After uploading, open the serial monitor and you should see data print out every second though it should remain static for the 30 seconds between measurements.</p>"},{"location":"examples/#example-6-signal-compensation","title":"Example 6 - Signal Compensation","text":"<p>Example six shows how to input custom compensation values for temperature, altitude and ambient pressure. The code stops periodic measurements while the values are stored. These values are stored in the sensor's RAM by default but can be stored in EEPROM. When stored in RAM, the values reset if <code>reInit</code> is called or on a power cycle. After the settings are stored, the code reinitializes periodic measurements and prints out data for CO<sub>2</sub>, temperature, and humidity.</p> Example 6 Arduino Code <pre><code>/*\n  Signal Compensation\n  By: Paul Clark\n  Based on earlier code by: Nathan Seidle\n  SparkFun Electronics\n  Date: June 3rd, 2021\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun! https://www.sparkfun.com/products/18365\n\n  This example prints the current CO2 level, relative humidity, and temperature in C.\n\n  Hardware Connections:\n  Attach RedBoard to computer using a USB cable.\n  Connect SCD40/41 to RedBoard using Qwiic cable.\n  Open Serial Monitor at 115200 baud.\n*/\n\n#include &lt;Wire.h&gt;\n\n#include \"SparkFun_SCD4x_Arduino_Library.h\" //Click here to get the library: http://librarymanager/All#SparkFun_SCD4x\nSCD4x mySensor;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(F(\"SCD4x Example\"));\n  Wire.begin();\n\n  //mySensor.enableDebugging(); // Uncomment this line to get helpful debug messages on Serial\n\n  if (mySensor.begin() == false)\n  {\n    Serial.println(F(\"Sensor not detected. Please check wiring. Freezing...\"));\n    while (1)\n      ;\n  }\n\n  //We need to stop periodic measurements before we can change the sensor signal compensation settings\n  if (mySensor.stopPeriodicMeasurement() == true)\n  {\n    Serial.println(F(\"Periodic measurement is disabled!\"));\n  }  \n\n  //Now we can change the sensor settings.\n  //There are three signal compensation commands we can use: setTemperatureOffset; setSensorAltitude; and setAmbientPressure\n\n  Serial.print(F(\"Temperature offset is currently: \"));\n  Serial.println(mySensor.getTemperatureOffset(), 2); // Print the temperature offset with two decimal places\n  mySensor.setTemperatureOffset(5); // Set the temperature offset to 5C\n  Serial.print(F(\"Temperature offset is now: \"));\n  Serial.println(mySensor.getTemperatureOffset(), 2); // Print the temperature offset with two decimal places\n\n  Serial.print(F(\"Sensor altitude is currently: \"));\n  Serial.println(mySensor.getSensorAltitude()); // Print the sensor altitude\n  mySensor.setSensorAltitude(1000); // Set the sensor altitude to 1000m\n  Serial.print(F(\"Sensor altitude is now: \"));\n  Serial.println(mySensor.getSensorAltitude()); // Print the sensor altitude\n\n  //There is no getAmbientPressure command\n  bool success = mySensor.setAmbientPressure(98700); // Set the ambient pressure to 98700 Pascals\n  if (success)\n  {\n    Serial.println(F(\"setAmbientPressure was successful\"));\n  }\n\n  //The signal compensation settings are stored in RAM by default and will reset if reInit is called\n  //or if the power is cycled. To store the settings in EEPROM we can call:\n  mySensor.persistSettings(); // Uncomment this line to store the sensor settings in EEPROM\n\n  //Just for giggles, while the periodic measurements are stopped, let's read the sensor serial number\n  char serialNumber[13]; // The serial number is 48-bits. We need 12 bytes plus one extra to store it as ASCII Hex\n  if (mySensor.getSerialNumber(serialNumber) == true)\n  {\n    Serial.print(F(\"The sensor's serial number is: 0x\"));\n    Serial.println(serialNumber);\n  }\n\n  //Finally, we need to restart periodic measurements\n  if (mySensor.startPeriodicMeasurement() == true)\n  {\n    Serial.println(F(\"Periodic measurements restarted!\"));\n  }\n}\n\nvoid loop()\n{\n  if (mySensor.readMeasurement()) // readMeasurement will return true when fresh data is available\n  {\n    Serial.println();\n\n    Serial.print(F(\"CO2(ppm):\"));\n    Serial.print(mySensor.getCO2());\n\n    Serial.print(F(\"\\tTemperature(C):\"));\n    Serial.print(mySensor.getTemperature(), 1);\n\n    Serial.print(F(\"\\tHumidity(%RH):\"));\n    Serial.print(mySensor.getHumidity(), 1);\n\n    Serial.println();\n  }\n  else\n    Serial.print(F(\".\"));\n\n  delay(500);\n}\n</code></pre>"},{"location":"examples/#example-8-scd41-single-shot","title":"Example 8 - SCD41 Single Shot","text":"<p>The eighth example demonstrates how to configure the SCD41 to operate in Single-Shot mode for maximum power efficiency. The code disables periodic measurements and enables single-shot measurements with the <code>measureSingleShot</code> function. The main loop waits for fresh data from the SCD41 and then prints out CO<sub>2</sub>, temperature, and humidity data whenever it is available.</p> Example 6 Arduino Code <pre><code>/*\n  SCD41 Low Power Single Shot\n  By: Paul Clark\n  Based on earlier code by: Nathan Seidle\n  SparkFun Electronics\n  Date: June 3rd, 2021\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun! https://www.sparkfun.com/products/18365\n\n  This example prints the current CO2 level, relative humidity, and temperature in C.\n\n  Hardware Connections:\n  Attach RedBoard to computer using a USB cable.\n  Connect SCD40/41 to RedBoard using Qwiic cable.\n  Open Serial Monitor at 115200 baud.\n*/\n\n#include &lt;Wire.h&gt;\n\n#include \"SparkFun_SCD4x_Arduino_Library.h\" //Click here to get the library: http://librarymanager/All#SparkFun_SCD4x\n\nSCD4x mySensor(SCD4x_SENSOR_SCD41); // Tell the library we have a SCD41 connected\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(F(\"SCD41 Example\"));\n  Wire.begin();\n\n  //mySensor.enableDebugging(); // Uncomment this line to get helpful debug messages on Serial\n\n  if (mySensor.begin(false, true, false) == false) // Do not start periodic measurements\n  //measBegin_________/     |     |\n  //autoCalibrate__________/      |\n  //skipStopPeriodicMeasurements_/\n  {\n    Serial.println(F(\"Sensor not detected. Please check wiring. Freezing...\"));\n    while (1)\n      ;\n  }\n\n  //Let's call measureSingleShot to start the first conversion\n  bool success = mySensor.measureSingleShot();\n  if (success == false)\n  {\n    Serial.println(F(\"measureSingleShot failed. Are you sure you have a SCD41 connected? Freezing...\"));\n    while (1)\n      ;    \n  }\n}\n\nvoid loop()\n{\n  while (mySensor.readMeasurement() == false) // readMeasurement will return true when fresh data is available\n  {\n    Serial.print(F(\".\"));\n    delay(500);\n  }\n\n  Serial.println();\n\n  Serial.print(F(\"CO2(ppm):\"));\n  Serial.print(mySensor.getCO2());\n\n  Serial.print(F(\"\\tTemperature(C):\"));\n  Serial.print(mySensor.getTemperature(), 1);\n\n  Serial.print(F(\"\\tHumidity(%RH):\"));\n  Serial.print(mySensor.getHumidity(), 1);\n\n  Serial.println();\n\n  mySensor.measureSingleShotRHTOnly(); // Request just the RH and the Temperature (should take 50ms)\n\n  while (mySensor.readMeasurement() == false) // readMeasurement will return true when fresh data is available\n  {\n    Serial.print(F(\".\"));\n    delay(5);\n  }\n\n  Serial.println();\n\n  Serial.print(F(\"Temperature(C):\"));\n  Serial.print(mySensor.getTemperature(), 1);\n\n  Serial.print(F(\"\\tHumidity(%RH):\"));\n  Serial.print(mySensor.getHumidity(), 1);\n\n  Serial.println();\n\n  mySensor.measureSingleShot(); // Request fresh data (should take 5 seconds)\n}\n</code></pre>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>Now that we're familiar with the SCD4X sensors and these breakouts, it's time to assemble it into a circuit.</p>"},{"location":"hardware_assembly/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>SparkFun's Qwiic system makes assembling a circuit a breeze. Simply plug the breakout into your chosen microcontroller with a Qwiic cable. After assembling your circuit, it should look similar to the photo below:</p> <p></p> <p>SparkFun CO<sub>2</sub> Humidity and Temperature Sensor - SCD40 (Qwiic) plugged into the RedBoard Qwiic</p> <p>Reminder, for ideal results, make sure to fully calibrate the SCD4X by taking continuous measurements for one hour every day for seven days.</p>"},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"<p>Those who prefer a traditional soldered assembly should solder wires or header pins to the PTH header on the side of the board. If you're not familiar with through-hole soldering or would like a refresher, take a look at our Through-Hole Soldering Tutorial:</p> <ul> <li> How to Solder: Through-Hole Soldering </li> </ul>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's take a closer look at the SCD4X sensors and hardware on these sensor breakouts.</p>"},{"location":"hardware_overview/#scd40-and-scd41-co2-sensors","title":"SCD40 and SCD41 CO<sub>2</sub> Sensors","text":"<p>The SCD4x CO<sub>2</sub> sensors use Sensirion's PASense<sup>\u2122</sup>, a photoacoustic measurement system, to accurately measure CO<sub>2</sub> concentration using a combination of a narrow band of IR light and a microphone. The sensors also have a built-in humidity and temperatuer sensor using Sensirion's CMOSens<sup>\u2122</sup> technology to provide environmental data and compensate for environmental conditions in CO<sub>2</sub> measurement. For a detailed overview of the SCD4X sensors, refer to the datasheet.</p> <p></p> <p>Note: The PCB design is shared between the SCD40 and SCD41 and the version is indicated by the solder pad above the sensor.</p> <p>Now you may be curious as to just what photoacoustic measuring actually is. Photoacoustic measuring uses light (photo) and sound/vibrations (acoustic) in tandem to measure the the photoacoustic effect when energy is absorbed by particles (in the case of these sensors, CO<sub>2</sub> molecules). The SCD4X has an IR emitter with a filter to shine a specific IR light into the sensing area. CO<sub>2</sub> molecules inside the sensing area absorb energy from the emitted IR light and vibrate. The microphone inside the sensing area picks up this acoustic vibration and then this data is processed to report CO<sub>2</sub> concentration. This is just a quick and basic explanation of the photoacoustic process used in these sensors. For detailed information on Sensirion's PASens and CMOSens technology, refer to their technology page.</p> <p>The SCD4X sensors accept a supply voltage between 2.4V to 5.5V though they run on 3.3V in standard Qwiic circuits. The sensors draw max of 205mA@3.3V with an average draw of 18mA@3.3V with periodic measurements in normal mode (3.5mA@3.3V in low power mode). While in Single Shot mode and taking one measurement every five minutes, the SCD41 draws only 0.5mA@3.3V. </p> <p>Both sensors have identical operating characteristics outside of their ideal measurement ranges, measurement accuracy, and feature set. The SCD40's ideal measurement range is 400ppm to 2,000pm with an accuracy of \u00b150ppm + 5% of the reading and the SCD41 has an ideal measurement range of 400ppm to 5,000ppm with an accuracy of \u00b140ppm + 5% of the reading. The SCD41 also includes a single-shot mode for low power applications. The table below outlines the rest of the SCD4X's sensing parameters: </p> Parameter Units Min Typ Max Notes CO<sub>2</sub> Output Range ppm 0 - 40,000 CO<sub>2</sub> Measurement Accuracy ppm - \u00b1(50 + 5%) - SCD40 accuracy - \u00b1(40 + 5%) - SCD41 accuracy Humidity Range %RH 0 - 100 Humidity Accuracy %RH - \u00b16 - 15\u00b0C - 35\u00b0C, 20%RH - 65%RH - \u00b19 - -10\u00b0C - 60 \u00b0C, 0%RH - 100%RH Temperature Range \u00b0C -10 - 60 Temperature Accuracy \u00b0C - \u00b10.8 - 15\u00b0C - 35\u00b0C - \u00b11.5 - -10\u00b0C - 60\u00b0C"},{"location":"hardware_overview/#qwiici2c-interface","title":"Qwiic/I<sup>2</sup>C Interface","text":"<p>The boards route the SCD4X's I<sup>2</sup>C interface to a pair of Qwiic connectors as well as a 0.1\"-spaced plated through-hole (PTH) header.</p> <p></p> <p>The SDC4X's has a 7-bit unshifted address of 0x62. The I<sup>2</sup>C bus has a start up time after hard and soft resets of 1000ms and supports clock speeds up to 100kHz.</p>"},{"location":"hardware_overview/#led","title":"LED","text":"<p>The sole LED on these boards is a red Power LED indicating when power is supplied to the board.</p> <p></p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"<p>The breakouts have a pair of solder jumpers labeled PWR and I2C. The PWR jumper completes the Power LED circuit. Open the jumper to disable the Power LED and reduce current draw of the board. The I2C jumper pulls the SDA/SCL lines to VCC (typically 3.3V) through a pair of 2.2k\u03a9 resistors. Open the jumper to disable the pullup resistors if needed.</p> <p></p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>These breakouts match the 1\" x 1\" (25.4mm x 25.4mm) Qwiic breakout standard and have four mounting holes that fit a 4-40 screw.</p> <p></p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun CO<sub>2</sub>, Humidity and Temperature Sensor - SCD4X (Qwiic) breakouts feature the SCD40 and SCD41 CO<sub>2</sub> sensors from Sensirion<sup>\u2122</sup>. The SCD4X sensors use Sensirion's PASens<sup>\u2122</sup> photoacoustic measurement system that combines the use of narrow-band IR light and a microphone inside the sensing package that results in a high-quality sensor that measures CO<sub>2</sub> concentrations from 0 to 40,000ppm. The sensors also have an integrated humidity and temperature sensor to provide environmental conditions to improve accuracy. The SCD40 has the best accuracy from 400 to 2,000ppm and the SCD41 has the best accuracy from 400 to 5,000ppm.</p> <p>These sensors also feature automatic self-calibration routines to automatically adjust to their sensing environments over seven day calibration period. For best results, Sensirion recommends taking continuous readings for at least one hour a day of 'fresh air' for the calibration period to complete.</p> <ul> <li> <p> </p> <p> SparkFun CO<sub>2</sub> Humidity and Temperature Sensor - SCD40 (Qwiic) SKU: SEN-22395   Purchase from SparkFun  </p> </li> <li> <p> </p> <p> SparkFun CO<sub>2</sub> Humidity and Temperature Sensor - SCD41 (Qwiic) SKU: SEN-22396  Purchase from SparkFun  </p> </li> </ul> <p>In this guide we'll go over the details of the SCD4x sensors and other hardware present on these breakout boards, how to assemble it into a Qwiic circuit and how to use it with the SparkFun SCD4x Arduino Library.</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this guide you will need a microcontroller to communicate with these SCD4X breakouts. Below are a few options that come Qwiic-enabled out of the box:</p> <ul> <li> <p> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C) DEV-20168 </p> <li> <p> <p> </p> <p> SparkFun RedBoard Plus DEV-18158 </p> <li> <p> <p> </p> <p> SparkFun Thing Plus - Artemis DEV-18158 </p> <li> <p> <p> </p> <p>SparkFun RedBoard Artemis DEV-15444 </p> <p>If your chosen microcontroller is not already Qwiic-enabled, you can add that functionality with one or more of the following items:</p> <ul> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit KIT-15081 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Adapter DEV-14495 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Arduino DEV-14352 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Thing Plus DEV-16790 </p> <p>You will also need at least one Qwiic cable to connect your SCD4X breakout to your microcontroller:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 100mm PRT-17259 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p>"},{"location":"introduction/#optional-materials","title":"Optional Materials","text":"<p>If you prefer a soldered connection or want to modify the solder jumpers on this board, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> Break Away Headers - Straight PRT-00116 </p> <li> <p> <p> </p> <p> SparkFun Beginner Tool Kit TOL-14681 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> <li> <p> Qwiic Shield for Arduino &amp; Photon Hookup Guide </p> </li> <li> <p> Qwiic Shield for Thing Plus Hookup Guide </p> </li> </ul>"},{"location":"resources_and_going_further/","title":"Resources","text":"<p>For more information about the SCD4X and these breakouts, check out the links below:</p> <ul> <li>Schematics:<ul> <li>SCD40</li> <li>SCD41</li> </ul> </li> <li>Eagle Files:<ul> <li>SCD40</li> <li>SCD41</li> </ul> </li> <li>Board Dimensions</li> <li>Datasheet (SCD4X)</li> <li>Qwiic Info Page</li> <li>SparkFun SCD4X Arduino Library</li> <li>Hardware GitHub Repo</li> </ul>"},{"location":"single_page/","title":"Introduction","text":""},{"location":"single_page/#icon-materialbook-open-page-variant","title":"icon: material/book-open-page-variant","text":"<p>The SparkFun CO<sub>2</sub>, Humidity and Temperature Sensor - SCD4X (Qwiic) breakouts feature the SCD40 and SCD41 CO<sub>2</sub> sensors from Sensirion<sup>\u2122</sup>. The SCD4X sensors use Sensirion's PASens<sup>\u2122</sup> photoacoustic measurement system that combines the use of narrow-band IR light and a microphone inside the sensing package that results in a high-quality sensor that measures CO<sub>2</sub> concentrations from 0 to 40,000ppm. The sensors also have an integrated humidity and temperature sensor to provide environmental conditions to improve accuracy. The SCD40 has the best accuracy from 400 to 2,000ppm and the SCD41 has the best accuracy from 400 to 5,000ppm.</p> <p>These sensors also feature automatic self-calibration routines to automatically adjust to their sensing environments over seven day calibration period. For best results, Sensirion recommends taking continuous readings for at least one hour a day of 'fresh air' for the calibration period to complete.</p> <ul> <li> <p> </p> <p> SparkFun CO<sub>2</sub> Humidity and Temperature Sensor - SCD40 (Qwiic) SKU: SEN-22395   Purchase from SparkFun  </p> </li> <li> <p> </p> <p> SparkFun CO<sub>2</sub> Humidity and Temperature Sensor - SCD41 (Qwiic) SKU: SEN-22396  Purchase from SparkFun  </p> </li> </ul> <p>In this guide we'll go over the details of the SCD4x sensors and other hardware present on these breakout boards, how to assemble it into a Qwiic circuit and how to use it with the SparkFun SCD4x Arduino Library.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this guide you will need a microcontroller to communicate with these SCD4X breakouts. Below are a few options that come Qwiic-enabled out of the box:</p> <ul> <li> <p> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C) DEV-20168 </p> <li> <p> <p> </p> <p> SparkFun RedBoard Plus DEV-18158 </p> <li> <p> <p> </p> <p> SparkFun Thing Plus - Artemis DEV-18158 </p> <li> <p> <p> </p> <p>SparkFun RedBoard Artemis DEV-15444 </p> <p>If your chosen microcontroller is not already Qwiic-enabled, you can add that functionality with one or more of the following items:</p> <ul> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit KIT-15081 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Adapter DEV-14495 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Arduino DEV-14352 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Thing Plus DEV-16790 </p> <p>You will also need at least one Qwiic cable to connect your SCD4X breakout to your microcontroller:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 100mm PRT-17259 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p>"},{"location":"single_page/#optional-materials","title":"Optional Materials","text":"<p>If you prefer a soldered connection or want to modify the solder jumpers on this board, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> Break Away Headers - Straight PRT-00116 </p> <li> <p> <p> </p> <p> SparkFun Beginner Tool Kit TOL-14681 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> <li> <p> Qwiic Shield for Arduino &amp; Photon Hookup Guide </p> </li> <li> <p> Qwiic Shield for Thing Plus Hookup Guide </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":""},{"location":"single_page/#icon-materialcog","title":"icon: material/cog","text":"<p>Let's take a closer look at the SCD4X sensors and hardware on these sensor breakouts.</p>"},{"location":"single_page/#scd40-and-scd41-co2-sensors","title":"SCD40 and SCD41 CO<sub>2</sub> Sensors","text":"<p>The SCD4x CO<sub>2</sub> sensors use Sensirion's PASense<sup>\u2122</sup>, a photoacoustic measurement system, to accurately measure CO<sub>2</sub> concentration using a combination of a narrow band of IR light and a microphone. The sensors also have a built-in humidity and temperatuer sensor using Sensirion's CMOSens<sup>\u2122</sup> technology to provide environmental data and compensate for environmental conditions in CO<sub>2</sub> measurement. For a detailed overview of the SCD4X sensors, refer to the datasheet.</p> <p></p> <p>Note: The PCB design is shared between the SCD40 and SCD41 and the version is indicated by the solder pad above the sensor.</p> <p>Now you may be curious as to just what photoacoustic measuring actually is. Photoacoustic measuring uses light (photo) and sound/vibrations (acoustic) in tandem to measure the the photoacoustic effect when energy is absorbed by particles (in the case of these sensors, CO<sub>2</sub> molecules). The SCD4X has an IR emitter with a filter to shine a specific IR light into the sensing area. CO<sub>2</sub> molecules inside the sensing area absorb energy from the emitted IR light and vibrate. The microphone inside the sensing area picks up this acoustic vibration and then this data is processed to report CO<sub>2</sub> concentration. This is just a quick and basic explanation of the photoacoustic process used in these sensors. For detailed information on Sensirion's PASens and CMOSens technology, refer to their technology page.</p> <p>The SCD4X sensors accept a supply voltage between 2.4V to 5.5V though they run on 3.3V in standard Qwiic circuits. The sensors draw max of 205mA@3.3V with an average draw of 18mA@3.3V with periodic measurements in normal mode (3.5mA@3.3V in low power mode). While in Single Shot mode and taking one measurement every five minutes, the SCD41 draws only 0.5mA@3.3V. </p> <p>Both sensors have identical operating characteristics outside of their ideal measurement ranges, measurement accuracy, and feature set. The SCD40's ideal measurement range is 400ppm to 2,000pm with an accuracy of \u00b150ppm + 5% of the reading and the SCD41 has an ideal measurement range of 400ppm to 5,000ppm with an accuracy of \u00b140ppm + 5% of the reading. The SCD41 also includes a single-shot mode for low power applications. The table below outlines the rest of the SCD4X's sensing parameters: </p> Parameter Units Min Typ Max Notes CO<sub>2</sub> Output Range ppm 0 - 40,000 CO<sub>2</sub> Measurement Accuracy ppm - \u00b1(50 + 5%) - SCD40 accuracy - \u00b1(40 + 5%) - SCD41 accuracy Humidity Range %RH 0 - 100 Humidity Accuracy %RH - \u00b16 - 15\u00b0C - 35\u00b0C, 20%RH - 65%RH - \u00b19 - -10\u00b0C - 60 \u00b0C, 0%RH - 100%RH Temperature Range \u00b0C -10 - 60 Temperature Accuracy \u00b0C - \u00b10.8 - 15\u00b0C - 35\u00b0C - \u00b11.5 - -10\u00b0C - 60\u00b0C"},{"location":"single_page/#qwiici2c-interface","title":"Qwiic/I<sup>2</sup>C Interface","text":"<p>The boards route the SCD4X's I<sup>2</sup>C interface to a pair of Qwiic connectors as well as a 0.1\"-spaced plated through-hole (PTH) header.</p> <p></p> <p>The SDC4X's has a 7-bit unshifted address of 0x62. The I<sup>2</sup>C bus has a start up time after hard and soft resets of 1000ms and supports clock speeds up to 100kHz.</p>"},{"location":"single_page/#led","title":"LED","text":"<p>The sole LED on these boards is a red Power LED indicating when power is supplied to the board.</p> <p></p>"},{"location":"single_page/#solder-jumpers","title":"Solder Jumpers","text":"<p>The breakouts have a pair of solder jumpers labeled PWR and I2C. The PWR jumper completes the Power LED circuit. Open the jumper to disable the Power LED and reduce current draw of the board. The I2C jumper pulls the SDA/SCL lines to VCC (typically 3.3V) through a pair of 2.2k\u03a9 resistors. Open the jumper to disable the pullup resistors if needed.</p> <p></p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>These breakouts match the 1\" x 1\" (25.4mm x 25.4mm) Qwiic breakout standard and have four mounting holes that fit a 4-40 screw.</p> <p></p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"single_page/#icon-materialtools","title":"icon: material/tools","text":"<p>Now that we're familiar with the SCD4X sensors and these breakouts, it's time to assemble it into a circuit.</p>"},{"location":"single_page/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>SparkFun's Qwiic system makes assembling a circuit a breeze. Simply plug the breakout into your chosen microcontroller with a Qwiic cable. After assembling your circuit, it should look similar to the photo below:</p> <p></p> <p>SparkFun CO<sub>2</sub> Humidity and Temperature Sensor - SCD40 (Qwiic) plugged into the RedBoard Qwiic</p> <p>Reminder, for ideal results, make sure to fully calibrate the SCD4X by taking continuous measurements for one hour every day for seven days.</p>"},{"location":"single_page/#soldered-assembly","title":"Soldered Assembly","text":"<p>Those who prefer a traditional soldered assembly should solder wires or header pins to the PTH header on the side of the board. If you're not familiar with through-hole soldering or would like a refresher, take a look at our Through-Hole Soldering Tutorial:</p> <ul> <li> How to Solder: Through-Hole Soldering </li> </ul>"},{"location":"single_page/#software-setup-and-programming","title":"Software Setup and Programming","text":""},{"location":"single_page/#icon-simplearduino","title":"icon: simple/arduino","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p> <p>We've written an Arduino library for the SCD4X sensors to make it easy to get CO<sub>2</sub> data from these sensors along with other settings and features for these breakouts. Users can download the library through the Arduino Library Manager by searching for \"SparkFun SCD4x\" like the screenshot below shows:</p> <p></p> <p>Those who prefer to manually install it can download a ZIP of the library by clicking the button below:</p> <p> SparkFun SCD4x Arduino Library (ZIP) </p> <p>With the library installed let's move on to looking at a few of the examples included in it.</p>"},{"location":"single_page/#example-code","title":"Example Code","text":"<p>The SparkFun SCD4X Arduino Library includes several examples to start receiving CO<sub>2</sub> concentration, temperature and humidity data from the SCD4X. Let's take a closer look at a few of the examples included with the library.</p>"},{"location":"single_page/#example-1-basic-readings","title":"Example 1 - Basic Readings","text":"<p>The first example in the library demonstrates how to initialize the SCD4X on the I<sup>2</sup>C bus to poll data from the sensor using periodic measurements every five seconds. Open the example by navigating to File &gt; Examples &gt; SparkFun SCD4x Arduino Library &gt; Example1_BasicReadings. Alternatively, you can copy the code below into a blank Arduino sketch:</p> Example 1 Arduino Code <pre><code>/*\n  Reading CO2, humidity and temperature from the SCD4x\n  By: Paul Clark\n  Based on earlier code by: Nathan Seidle\n  SparkFun Electronics\n  Date: June 3rd, 2021\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun! https://www.sparkfun.com/products/18365\n\n  This example prints the current CO2 level, relative humidity, and temperature in C.\n\n  Hardware Connections:\n  Attach RedBoard to computer using a USB cable.\n  Connect SCD40/41 to RedBoard using Qwiic cable.\n  Open Serial Monitor at 115200 baud.\n*/\n\n#include &lt;Wire.h&gt;\n\n#include \"SparkFun_SCD4x_Arduino_Library.h\" //Click here to get the library: http://librarymanager/All#SparkFun_SCD4x\nSCD4x mySensor;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(F(\"SCD4x Example\"));\n  Wire.begin();\n\n  //mySensor.enableDebugging(); // Uncomment this line to get helpful debug messages on Serial\n\n  //.begin will start periodic measurements for us (see the later examples for details on how to override this)\n  if (mySensor.begin() == false)\n  {\n    Serial.println(F(\"Sensor not detected. Please check wiring. Freezing...\"));\n    while (1)\n      ;\n  }\n\n  //The SCD4x has data ready every five seconds\n}\n\nvoid loop()\n{\n  if (mySensor.readMeasurement()) // readMeasurement will return true when fresh data is available\n  {\n    Serial.println();\n\n    Serial.print(F(\"CO2(ppm):\"));\n    Serial.print(mySensor.getCO2());\n\n    Serial.print(F(\"\\tTemperature(C):\"));\n    Serial.print(mySensor.getTemperature(), 1);\n\n    Serial.print(F(\"\\tHumidity(%RH):\"));\n    Serial.print(mySensor.getHumidity(), 1);\n\n    Serial.println();\n  }\n  else\n    Serial.print(F(\".\"));\n\n  delay(500);\n}\n</code></pre> <p>Select your Board/Port and click the \"Upload\" button. Once the code finishes uploading, open up a Serial Monitor and check the output. You should see CO<sub>2</sub>, temperature and humidity data print out every 5 seconds:</p> <p></p>"},{"location":"single_page/#example-2-low-power-readings","title":"Example 2 - Low Power Readings","text":"<p>The second example demonstrates how to configure the SCD4X to disable periodic measurements and enable low-power mode. This sets the SCD4x to take measurements every 30 seconds. Open the example in Arduino or copy the code below into a blank sketch:</p> Example 2 Arduino Code <pre><code>/*\n  Reading CO2, humidity and temperature from the SCD4x in Low Power mode\n  By: Paul Clark\n  Based on earlier code by: Nathan Seidle\n  SparkFun Electronics\n  Date: June 3rd, 2021\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun! https://www.sparkfun.com/products/18365\n\n  This example prints the current CO2 level, relative humidity, and temperature in C.\n\n  Hardware Connections:\n  Attach RedBoard to computer using a USB cable.\n  Connect SCD40/41 to RedBoard using Qwiic cable.\n  Open Serial Monitor at 115200 baud.\n*/\n\n#include &lt;Wire.h&gt;\n\n#include \"SparkFun_SCD4x_Arduino_Library.h\" //Click here to get the library: http://librarymanager/All#SparkFun_SCD4x\nSCD4x mySensor;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(F(\"SCD4x Example\"));\n  Wire.begin();\n\n  //mySensor.enableDebugging(); // Uncomment this line to get helpful debug messages on Serial\n\n  //.begin will start periodic measurements for us (see the later examples for details on how to override this)\n  if (mySensor.begin() == false)\n  {\n    Serial.println(F(\"Sensor not detected. Please check wiring. Freezing...\"));\n    while (1)\n      ;\n  }\n\n  //By default, the SCD4x has data ready every five seconds.\n  //We can enable low power operation and receive a reading every ~30 seconds\n\n  //But first, we need to stop periodic measurements otherwise startLowPowerPeriodicMeasurement will fail\n  if (mySensor.stopPeriodicMeasurement() == true)\n  {\n    Serial.println(F(\"Periodic measurement is disabled!\"));\n  }  \n\n  //Now we can enable low power periodic measurements\n  if (mySensor.startLowPowerPeriodicMeasurement() == true)\n  {\n    Serial.println(F(\"Low power mode enabled!\"));\n  }\n\n  //The SCD4x has data ready every thirty seconds\n}\n\nvoid loop()\n{\n  if (mySensor.readMeasurement()) // readMeasurement will return true when fresh data is available\n  {\n    Serial.println();\n\n    Serial.print(F(\"CO2(ppm):\"));\n    Serial.print(mySensor.getCO2());\n\n    Serial.print(F(\"\\tTemperature(C):\"));\n    Serial.print(mySensor.getTemperature(), 1);\n\n    Serial.print(F(\"\\tHumidity(%RH):\"));\n    Serial.print(mySensor.getHumidity(), 1);\n\n    Serial.println();\n  }\n  else\n    Serial.print(F(\".\"));\n\n  delay(1000);\n}\n</code></pre> <p>After uploading, open the serial monitor and you should see data print out every second though it should remain static for the 30 seconds between measurements.</p>"},{"location":"single_page/#example-6-signal-compensation","title":"Example 6 - Signal Compensation","text":"<p>Example six shows how to input custom compensation values for temperature, altitude and ambient pressure. The code stops periodic measurements while the values are stored. These values are stored in the sensor's RAM by default but can be stored in EEPROM. When stored in RAM, the values reset if <code>reInit</code> is called or on a power cycle. After the settings are stored, the code reinitializes periodic measurements and prints out data for CO<sub>2</sub>, temperature, and humidity.</p> Example 6 Arduino Code <pre><code>/*\n  Signal Compensation\n  By: Paul Clark\n  Based on earlier code by: Nathan Seidle\n  SparkFun Electronics\n  Date: June 3rd, 2021\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun! https://www.sparkfun.com/products/18365\n\n  This example prints the current CO2 level, relative humidity, and temperature in C.\n\n  Hardware Connections:\n  Attach RedBoard to computer using a USB cable.\n  Connect SCD40/41 to RedBoard using Qwiic cable.\n  Open Serial Monitor at 115200 baud.\n*/\n\n#include &lt;Wire.h&gt;\n\n#include \"SparkFun_SCD4x_Arduino_Library.h\" //Click here to get the library: http://librarymanager/All#SparkFun_SCD4x\nSCD4x mySensor;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(F(\"SCD4x Example\"));\n  Wire.begin();\n\n  //mySensor.enableDebugging(); // Uncomment this line to get helpful debug messages on Serial\n\n  if (mySensor.begin() == false)\n  {\n    Serial.println(F(\"Sensor not detected. Please check wiring. Freezing...\"));\n    while (1)\n      ;\n  }\n\n  //We need to stop periodic measurements before we can change the sensor signal compensation settings\n  if (mySensor.stopPeriodicMeasurement() == true)\n  {\n    Serial.println(F(\"Periodic measurement is disabled!\"));\n  }  \n\n  //Now we can change the sensor settings.\n  //There are three signal compensation commands we can use: setTemperatureOffset; setSensorAltitude; and setAmbientPressure\n\n  Serial.print(F(\"Temperature offset is currently: \"));\n  Serial.println(mySensor.getTemperatureOffset(), 2); // Print the temperature offset with two decimal places\n  mySensor.setTemperatureOffset(5); // Set the temperature offset to 5C\n  Serial.print(F(\"Temperature offset is now: \"));\n  Serial.println(mySensor.getTemperatureOffset(), 2); // Print the temperature offset with two decimal places\n\n  Serial.print(F(\"Sensor altitude is currently: \"));\n  Serial.println(mySensor.getSensorAltitude()); // Print the sensor altitude\n  mySensor.setSensorAltitude(1000); // Set the sensor altitude to 1000m\n  Serial.print(F(\"Sensor altitude is now: \"));\n  Serial.println(mySensor.getSensorAltitude()); // Print the sensor altitude\n\n  //There is no getAmbientPressure command\n  bool success = mySensor.setAmbientPressure(98700); // Set the ambient pressure to 98700 Pascals\n  if (success)\n  {\n    Serial.println(F(\"setAmbientPressure was successful\"));\n  }\n\n  //The signal compensation settings are stored in RAM by default and will reset if reInit is called\n  //or if the power is cycled. To store the settings in EEPROM we can call:\n  mySensor.persistSettings(); // Uncomment this line to store the sensor settings in EEPROM\n\n  //Just for giggles, while the periodic measurements are stopped, let's read the sensor serial number\n  char serialNumber[13]; // The serial number is 48-bits. We need 12 bytes plus one extra to store it as ASCII Hex\n  if (mySensor.getSerialNumber(serialNumber) == true)\n  {\n    Serial.print(F(\"The sensor's serial number is: 0x\"));\n    Serial.println(serialNumber);\n  }\n\n  //Finally, we need to restart periodic measurements\n  if (mySensor.startPeriodicMeasurement() == true)\n  {\n    Serial.println(F(\"Periodic measurements restarted!\"));\n  }\n}\n\nvoid loop()\n{\n  if (mySensor.readMeasurement()) // readMeasurement will return true when fresh data is available\n  {\n    Serial.println();\n\n    Serial.print(F(\"CO2(ppm):\"));\n    Serial.print(mySensor.getCO2());\n\n    Serial.print(F(\"\\tTemperature(C):\"));\n    Serial.print(mySensor.getTemperature(), 1);\n\n    Serial.print(F(\"\\tHumidity(%RH):\"));\n    Serial.print(mySensor.getHumidity(), 1);\n\n    Serial.println();\n  }\n  else\n    Serial.print(F(\".\"));\n\n  delay(500);\n}\n</code></pre>"},{"location":"single_page/#example-8-scd41-single-shot","title":"Example 8 - SCD41 Single Shot","text":"<p>The eighth example demonstrates how to configure the SCD41 to operate in Single-Shot mode for maximum power efficiency. The code disables periodic measurements and enables single-shot measurements with the <code>measureSingleShot</code> function. The main loop waits for fresh data from the SCD41 and then prints out CO<sub>2</sub>, temperature, and humidity data whenever it is available.</p> Example 6 Arduino Code <pre><code>/*\n  SCD41 Low Power Single Shot\n  By: Paul Clark\n  Based on earlier code by: Nathan Seidle\n  SparkFun Electronics\n  Date: June 3rd, 2021\n  License: MIT. See license file for more information but you can\n  basically do whatever you want with this code.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun! https://www.sparkfun.com/products/18365\n\n  This example prints the current CO2 level, relative humidity, and temperature in C.\n\n  Hardware Connections:\n  Attach RedBoard to computer using a USB cable.\n  Connect SCD40/41 to RedBoard using Qwiic cable.\n  Open Serial Monitor at 115200 baud.\n*/\n\n#include &lt;Wire.h&gt;\n\n#include \"SparkFun_SCD4x_Arduino_Library.h\" //Click here to get the library: http://librarymanager/All#SparkFun_SCD4x\n\nSCD4x mySensor(SCD4x_SENSOR_SCD41); // Tell the library we have a SCD41 connected\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(F(\"SCD41 Example\"));\n  Wire.begin();\n\n  //mySensor.enableDebugging(); // Uncomment this line to get helpful debug messages on Serial\n\n  if (mySensor.begin(false, true, false) == false) // Do not start periodic measurements\n  //measBegin_________/     |     |\n  //autoCalibrate__________/      |\n  //skipStopPeriodicMeasurements_/\n  {\n    Serial.println(F(\"Sensor not detected. Please check wiring. Freezing...\"));\n    while (1)\n      ;\n  }\n\n  //Let's call measureSingleShot to start the first conversion\n  bool success = mySensor.measureSingleShot();\n  if (success == false)\n  {\n    Serial.println(F(\"measureSingleShot failed. Are you sure you have a SCD41 connected? Freezing...\"));\n    while (1)\n      ;    \n  }\n}\n\nvoid loop()\n{\n  while (mySensor.readMeasurement() == false) // readMeasurement will return true when fresh data is available\n  {\n    Serial.print(F(\".\"));\n    delay(500);\n  }\n\n  Serial.println();\n\n  Serial.print(F(\"CO2(ppm):\"));\n  Serial.print(mySensor.getCO2());\n\n  Serial.print(F(\"\\tTemperature(C):\"));\n  Serial.print(mySensor.getTemperature(), 1);\n\n  Serial.print(F(\"\\tHumidity(%RH):\"));\n  Serial.print(mySensor.getHumidity(), 1);\n\n  Serial.println();\n\n  mySensor.measureSingleShotRHTOnly(); // Request just the RH and the Temperature (should take 50ms)\n\n  while (mySensor.readMeasurement() == false) // readMeasurement will return true when fresh data is available\n  {\n    Serial.print(F(\".\"));\n    delay(5);\n  }\n\n  Serial.println();\n\n  Serial.print(F(\"Temperature(C):\"));\n  Serial.print(mySensor.getTemperature(), 1);\n\n  Serial.print(F(\"\\tHumidity(%RH):\"));\n  Serial.print(mySensor.getHumidity(), 1);\n\n  Serial.println();\n\n  mySensor.measureSingleShot(); // Request fresh data (should take 5 seconds)\n}\n</code></pre>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"single_page/#resources","title":"Resources:","text":"<p>For more information about the SCD4X and these breakouts, check out the links below:</p> <ul> <li>Schematics:<ul> <li>SCD40</li> <li>SCD41</li> </ul> </li> <li>Eagle Files:<ul> <li>SCD40</li> <li>SCD41</li> </ul> </li> <li>Board Dimensions</li> <li>Datasheet (SCD4X)</li> <li>Qwiic Info Page</li> <li>SparkFun SCD4X Arduino Library</li> <li>Hardware GitHub Repo</li> </ul>"},{"location":"software_setup/","title":"Software Setup","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p> <p>We've written an Arduino library for the SCD4X sensors to make it easy to get CO<sub>2</sub> data from these sensors along with other settings and features for these breakouts. Users can download the library through the Arduino Library Manager by searching for \"SparkFun SCD4x\" like the screenshot below shows:</p> <p></p> <p>Those who prefer to manually install it can download a ZIP of the library by clicking the button below:</p> <p> SparkFun SCD4x Arduino Library (ZIP) </p> <p>With the library installed let's move on to looking at a few of the examples included in it.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/contribute/","title":"Help Improve the Experience!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#enhance-our-documentation","title":"Enhance our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Qwiic CO<sub>2</sub> Sensor - SCD4X repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#upgrade-our-hardware-design","title":"Upgrade our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Qwiic CO<sub>2</sub> Sensor - SCD4X repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design modifications</li> <li> <p>File a pull request with your changes, and enjoy making the world a better place.</p> <ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested upgrades, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision.</li> </ul> <p>Note</p> <p>Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.</p> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to those who have contributed to this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Qwiic CO<sub>2</sub> Sensor - SCD4X repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Qwiic CO<sub>2</sub> Sensor - SCD4X repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"}]}